# EzzDay Backend - Production Docker Compose
# Production-ready stack with security and performance optimizations

version: '3.8'

services:
  # Main Application (Multi-instance)
  app:
    image: ezzday/backend:${IMAGE_TAG:-latest}
    container_name: ezzday-backend-prod
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    ports:
      - "8000:8000"
    env_file:
      - ../environments/.env.prod
    environment:
      - WORKER_PROCESSES=2
      - WORKER_CONNECTIONS=1000
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    volumes:
      - app_logs:/app/logs:rw
      - app_storage:/app/storage:rw
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /etc/ssl/private:/etc/ssl/private:ro
    networks:
      - ezzday-prod-network
      - ezzday-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
      - /tmp/prometheus:size=50M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ezzday-nginx-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx:rw
    depends_on:
      - app
    networks:
      - ezzday-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (High Availability with Sentinel)
  redis-master:
    image: redis:7-alpine
    container_name: ezzday-redis-master-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 512M
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_master_data:/data:rw
    networks:
      - ezzday-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis-replica:
    image: redis:7-alpine
    container_name: ezzday-redis-replica-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 512M
    command: >
      redis-server 
      --replicaof redis-master 6379
      --masterauth ${REDIS_PASSWORD}
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_replica_data:/data:rw
    depends_on:
      - redis-master
    networks:
      - ezzday-db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis-sentinel:
    image: redis:7-alpine
    container_name: ezzday-redis-sentinel-prod
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --sentinel deny-scripts-reconfig yes
    volumes:
      - ../redis/sentinel.conf:/etc/redis/sentinel.conf:ro
      - redis_sentinel_data:/data:rw
    depends_on:
      - redis-master
      - redis-replica
    networks:
      - ezzday-db-network
    restart: unless-stopped
    ports:
      - "26379:26379"
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Workers (Scaled)
  celery_worker:
    image: ezzday/backend:${IMAGE_TAG:-latest}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    env_file:
      - ../environments/.env.prod
    volumes:
      - app_logs:/app/logs:rw
      - app_storage:/app/storage:rw
    depends_on:
      - redis-master
    networks:
      - ezzday-db-network
    restart: unless-stopped
    command: >
      sh -c "
        celery -A app.core.celery worker 
        --loglevel=warning 
        --concurrency=2 
        --max-tasks-per-child=1000
        --prefetch-multiplier=1
        --queues=default,high_priority,low_priority
      "
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat (Scheduler)
  celery_beat:
    image: ezzday/backend:${IMAGE_TAG:-latest}
    container_name: ezzday-celery-beat-prod
    env_file:
      - ../environments/.env.prod
    volumes:
      - app_logs:/app/logs:rw
      - celery_beat_data:/app/celerybeat-schedule:rw
    depends_on:
      - redis-master
    networks:
      - ezzday-db-network
    restart: unless-stopped
    command: >
      sh -c "
        celery -A app.core.celery beat 
        --loglevel=warning 
        --schedule=/app/celerybeat-schedule/celerybeat-schedule
        --pidfile=/app/celerybeat-schedule/celerybeat.pid
      "
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Flower (Monitoring)
  flower:
    image: ezzday/backend:${IMAGE_TAG:-latest}
    container_name: ezzday-flower-prod
    ports:
      - "5555:5555"
    env_file:
      - ../environments/.env.prod
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
      - FLOWER_URL_PREFIX=/flower
    depends_on:
      - redis-master
    networks:
      - ezzday-prod-network
      - ezzday-db-network
    restart: unless-stopped
    command: >
      sh -c "
        celery -A app.core.celery flower 
        --port=5555
        --url_prefix=/flower
        --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
      "
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ezzday-prometheus-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus:rw
    networks:
      - ezzday-prod-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://monitoring.ezzday.com/prometheus'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ezzday-grafana-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SERVER_DOMAIN=monitoring.ezzday.com
      - GF_SERVER_ROOT_URL=https://monitoring.ezzday.com/grafana
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - ezzday-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregation
  fluentd:
    image: fluent/fluentd:latest
    container_name: ezzday-fluentd-prod
    volumes:
      - ../monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - ezzday-prod-network
    restart: unless-stopped
    ports:
      - "24224:24224"
    security_opt:
      - no-new-privileges:true

  # Backup service
  backup:
    image: ezzday/backup:${IMAGE_TAG:-latest}
    container_name: ezzday-backup-prod
    env_file:
      - ../environments/.env.prod
    environment:
      - BACKUP_SCHEDULE=0 1 * * *
      - BACKUP_RETENTION_DAYS=90
    volumes:
      - app_storage:/app/storage:ro
      - backup_data:/backup:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ezzday-db-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/ezzday
  app_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ezzday/storage
  nginx_logs:
  redis_master_data:
  redis_replica_data:
  redis_sentinel_data:
  celery_beat_data:
  prometheus_data:
  grafana_data:
  backup_data:

networks:
  ezzday-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
  ezzday-db-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.23.0.0/16