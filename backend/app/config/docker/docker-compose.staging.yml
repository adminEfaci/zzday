# EzzDay Backend - Staging Docker Compose
# Staging environment with production-like setup but development conveniences

version: '3.8'

services:
  # Main Application
  app:
    image: ezzday/backend:${IMAGE_TAG:-staging}
    container_name: ezzday-backend-staging
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.8'
          memory: 384M
        reservations:
          cpus: '0.4'
          memory: 192M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    ports:
      - "8000:8000"
    env_file:
      - ../environments/.env.staging
    environment:
      - WORKER_PROCESSES=2
      - WORKER_CONNECTIONS=500
    volumes:
      - app_logs:/app/logs:rw
      - app_storage:/app/storage:rw
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "./health-check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ezzday-postgres-staging
    environment:
      POSTGRES_DB: ezzday_staging
      POSTGRES_USER: ezzday_staging
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ezzday_staging -d ezzday_staging"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ezzday-redis-staging
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data:rw
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RabbitMQ for Celery
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ezzday-rabbitmq-staging
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ezzday_staging
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq:rw
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Worker
  celery_worker:
    image: ezzday/backend:${IMAGE_TAG:-staging}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.4'
          memory: 192M
        reservations:
          cpus: '0.2'
          memory: 96M
    env_file:
      - ../environments/.env.staging
    volumes:
      - app_logs:/app/logs:rw
      - app_storage:/app/storage:rw
    depends_on:
      - redis
      - rabbitmq
      - db
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    command: >
      sh -c "
        ./wait-for-it.sh redis:6379 -- 
        ./wait-for-it.sh rabbitmq:5672 -- 
        celery -A app.core.celery worker 
        --loglevel=info 
        --concurrency=2 
        --max-tasks-per-child=1000
        --prefetch-multiplier=1
        --queues=default,high_priority,low_priority
      "
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat (Scheduler)
  celery_beat:
    image: ezzday/backend:${IMAGE_TAG:-staging}
    container_name: ezzday-celery-beat-staging
    env_file:
      - ../environments/.env.staging
    volumes:
      - app_logs:/app/logs:rw
      - celery_beat_data:/app/celerybeat-schedule:rw
    depends_on:
      - redis
      - rabbitmq
      - db
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    command: >
      sh -c "
        ./wait-for-it.sh redis:6379 -- 
        ./wait-for-it.sh rabbitmq:5672 -- 
        celery -A app.core.celery beat 
        --loglevel=info 
        --schedule=/app/celerybeat-schedule/celerybeat-schedule
        --pidfile=/app/celerybeat-schedule/celerybeat.pid
      "
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Flower (Monitoring)
  flower:
    image: ezzday/backend:${IMAGE_TAG:-staging}
    container_name: ezzday-flower-staging
    ports:
      - "5555:5555"
    env_file:
      - ../environments/.env.staging
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
      - FLOWER_URL_PREFIX=/flower
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    command: >
      sh -c "
        ./wait-for-it.sh redis:6379 -- 
        ./wait-for-it.sh rabbitmq:5672 -- 
        celery -A app.core.celery flower 
        --port=5555
        --url_prefix=/flower
        --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
      "
    security_opt:
      - no-new-privileges:true

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ezzday-prometheus-staging
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus:rw
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://staging-monitoring.ezzday.com/prometheus'
    security_opt:
      - no-new-privileges:true

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ezzday-grafana-staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SERVER_DOMAIN=staging-monitoring.ezzday.com
      - GF_SERVER_ROOT_URL=https://staging-monitoring.ezzday.com/grafana
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ezzday-mailhog-staging
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ezzday-jaeger-staging
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - ezzday-staging-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  app_logs:
    driver: local
  app_storage:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ezzday-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16