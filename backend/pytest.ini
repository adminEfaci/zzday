[tool:pytest]
minversion = 8.0
addopts = -ra -q --strict-markers --cov=app --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=100
testpaths = app/tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Custom markers
markers =
    unit: Unit tests (default)
    integration: Integration tests
    e2e: End-to-end tests
    smoke: Smoke tests for basic functionality
    performance: Performance and load tests
    security: Security-focused tests
    slow: Tests that take longer than 5 seconds
    requires_db: Tests that require database connection
    requires_redis: Tests that require Redis connection
    requires_auth: Tests that require authentication
    api: API endpoint tests
    domain: Domain logic tests
    infrastructure: Infrastructure layer tests
    application: Application layer tests
    presentation: Presentation layer tests
    value_objects: Value object tests
    aggregates: Aggregate tests
    services: Service tests
    repositories: Repository tests
    commands: Command tests
    queries: Query tests
    events: Event tests
    adapters: Adapter tests
    concurrent: Concurrency and thread-safety tests
    resilience: Resilience and fault tolerance tests
    regression: Regression tests
    critical: Critical path tests that must always pass
    
# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test discovery
norecursedirs = .git .tox dist build *.egg htmlcov .coverage __pycache__ .pytest_cache

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    ignore::sqlalchemy.exc.SAWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Performance settings
timeout = 300
timeout_method = thread
timeout_func_only = true

# Coverage settings
[coverage:run]
source = app
omit = 
    */tests/*
    */migrations/*
    */__pycache__/*
    */venv/*
    */conftest.py

[coverage:report]
precision = 2
skip_empty = True
skip_covered = False
show_missing = True
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract
    @abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml